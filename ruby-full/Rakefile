## colorize: see lib/rake/file_utils_ext.rb
def Rake.rake_output_message(message)
  $stderr.puts "\e[32;1m#{message}\e[0m"
end

## coloreize: see fileutils.rb
module FileUtils
  alias fu_output_message_orig fu_output_message

  def fu_output_message(msg)
    fu_output_message_orig("\e[32;1m#{msg}\e[0m")
  end
  private_module_function :fu_output_message
end

task :default => :tarball

desc "extract rbenv and ruby archives from container"
task :tarball do
  image = 'minimum2scp/ruby-full:latest'
  cname = 'ruby-full-tmp'
  dest = '/tmp'

  ## run ruby-full image
  sh "docker run -d --name #{cname} #{image}"

  ## install pigz
  sh "docker exec #{cname} bash -c 'apt-get update && apt-get install pigz -y --no-install-recommends'"

  ## archive /opt/rbenv (without /opt/rbenv/versions/*)
  tarball = "/tmp/opt-rbenv.tar.gz"
  sh "docker exec #{cname} tar -Ipigz -cf #{tarball} -C /opt rbenv --exclude 'versions/*'"
  sh "docker cp #{cname}:#{tarball} #{dest}"

  ## get installed versions (/opt/rbenv/versions/*)
  versions = `docker exec #{cname} find /opt/rbenv/versions -mindepth 1 -maxdepth 1 -type d`.split("\n").map{|line|
    line.chomp.sub('/opt/rbenv/versions/', '')
  }

  ## archive /opt/rbenv/versions/*
  versions.each do |v|
    tarball = "/tmp/opt-rbenv-ruby-#{v}.tar.gz"
    sh "docker exec #{cname} tar -Ipigz -cf #{tarball} -C /opt/rbenv/versions #{v}"
    sh "docker cp #{cname}:#{tarball} #{dest}"
  end

  ## cleanup
  sh "docker kill #{cname}"
  sh "docker rm #{cname}"
end

namespace :build do
  cname = 'ruby-build-container'
  image = 'minimum2scp/ruby-full:latest'
  versions = %w[2.0.0-p643 2.1.5 2.2.0]
  dest = '/tmp'
  sign_key = '3184B100' # tyamada@minimum2scp.org

  desc "build all binaries"
  task :all do
    Rake::Task['build:prepare']
    versions.each do |v|
      Rake::Task['build:ruby'].invoke(v)
      Rake::Task['build:ruby'].reenable
    end
    Rake::Task['build:teardown'].invoke
  end

  desc "prepare build container"
  task :prepare do
    sh <<-EOS
        if docker inspect #{cname} 1>/dev/null 2>/dev/null; then
          :
        else
          docker run -d --name #{cname} #{image}
          docker exec #{cname} bash -c 'apt-get update && apt-get install pigz -y --no-install-recommends'
          docker exec #{cname} bash -l -c 'rbenv update'
        fi
          EOS
  end

  desc "rm build container"
  task :teardown do
    sh "if docker inspect #{cname} 1>/dev/null 2>/dev/null; then docker rm -f #{cname}; fi"
  end

  desc "build ruby archive by ruby-build (RBENV_ROOT=/opt/rbenv)"
  task :ruby, [:version] => ['build:prepare'] do |t,args|
    version = args[:version]
    ## run rbenv install
    sh "docker exec #{cname} bash -l -c 'rbenv install #{version}'"
    ## archive
    tarball = "/tmp/opt-rbenv-ruby-#{version}.tar.gz"
    sh "docker exec #{cname} tar -Ipigz -cf #{tarball} -C /opt/rbenv/versions #{version}"
    sh "docker cp #{cname}:#{tarball} #{dest}"
    ## sign archive
    sh "if gpg --list-secret-keys #{sign_key} 1>/dev/null 2>/dev/null; then gpg -b -a --default-key #{sign_key} #{dest}/#{File.basename(tarball)}; fi"
  end
end
